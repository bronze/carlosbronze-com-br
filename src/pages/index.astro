---
import { Image } from "astro-eleventy-img";
import { Icon } from 'astro-icon';
import { Sprite } from 'astro-icon';
import DarkToggle from '../components/DarkToggle.astro';
let styleSheet = Astro.resolve('../styles/styles.scss');
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="author" content="Carlos Bronze" />
  <link rel="webmention" href="https://webmention.io/www.carlosbronze.com.br/webmention" />
  <link rel="pingback" href="https://webmention.io/www.carlosbronze.com.br/xmlrpc" />
  <link rel="dns-prefetch" href="https://www.google-analytics.com" />
  <meta http-equiv="X-UA-Compatible" content="chrome=1" />
  <meta name="revisit-after" content="7 days" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="msapplication-TileColor" content="#a90000">
  <meta name="theme-color" content="#a90000">
  <link rel="stylesheet" href={styleSheet} >

  <link rel="icon" href="data:;base64,iVBORwOKGO=" />
  <title>Carlos Bronze</title>
</head>
<body x-data="darkmode">
  <Sprite.Provider>
    <header class="header">
      <nav>
        <div>
          <a href="https://linkedin.com/in/carlosbronze" rel="me" title="LinkedIn" >
            <Sprite name="mdi:linkedin" />
          </a>
          <a href="https://twitter.com/carlosbronze" rel="me" title="Twitter" >
            <Sprite name="mdi:twitter" />
          </a>
          <a href="https://github.com/bronze" rel="me" title="GitHub" >
            <Sprite name="mdi:github" />
          </a>
        </div>
      </nav>
    </header>

    <main>
      <h1>Carlos Bronze</h1><DarkToggle></DarkToggle>
      <p>Digital Branding and Operations</p>
    </main>

  </Sprite.Provider>
  <script src="//unpkg.com/alpinejs" defer></script>
</body>
</html>

<script>
  // On page load or when changing themes, best to add inline in `head` to avoid FOUC
  try {
    if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  } catch (_) {}
  document.addEventListener('alpine:init', () => {
    Alpine.data('darkmode', () => ({
      dark: (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)),
      toggleTheme() {
        if (window.localStorage.theme != 'dark') {
          document.documentElement.classList.add('dark');
          localStorage.theme = 'dark';
        } else {
          document.documentElement.classList.remove('dark');
          window.localStorage.theme = null;
        }
        this.dark = !this.dark;
        console.log('storage: ' + window.localStorage.theme + ' | dark: ' + this.dark);

      },

      init() {
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark');
          localStorage.theme = 'dark'; // Force a dark value on first login without preset localstorage to avoid bugs on checkbox
          this.dark = true;
          console.log('init storage: ' + window.localStorage.theme + ' | dark: ' + this.dark);
        } else {
          document.documentElement.classList.remove('dark');
          this.dark = false;
          console.log('init storage: ' + window.localStorage.theme + ' | dark: ' + this.dark);
        }
        console.log('storage: ' + window.localStorage.theme + ' | dark: ' + this.dark);
      }
    }))
  })
</script>