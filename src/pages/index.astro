---
// import { Icon } from 'astro-icon';
import { Sprite } from 'astro-icon';
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="author" content="Carlos Bronze" />
  <link rel="dns-prefetch" href="https://www.google-analytics.com" />
  <meta http-equiv="X-UA-Compatible" content="chrome=1" />
  <meta name="revisit-after" content="7 days" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="msapplication-TileColor" content="#a90000">
  <meta name="theme-color" content="#a90000">
  <link rel="icon" href="data:;base64,iVBORwOKGO=" />
  <title>Carlos Bronze</title>
  <meta name="description" content="Carlos Bronze">
  <style lang='scss' is:global>
    @import "../styles/styles.scss";
  </style>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Nunito&display=swap');
  </style>
  <script>
    (function(a,b,c){var d=a.history,e=document,f=navigator||{},g=localStorage,
    h=encodeURIComponent,i=d.pushState,k=function(){return Math.random().toString(36)},
    l=function(){return g.cid||(g.cid=k()),g.cid},m=function(r){var s=[];for(var t in r)
    r.hasOwnProperty(t)&&void 0!==r[t]&&s.push(h(t)+"="+h(r[t]));return s.join("&")},
    n=function(r,s,t,u,v,w,x){var z="https://www.google-analytics.com/collect",
    A=m({v:"1",ds:"web",aip:c.anonymizeIp?1:void 0,tid:b,cid:l(),t:r||"pageview",
    sd:c.colorDepth&&screen.colorDepth?screen.colorDepth+"-bits":void 0,dr:e.referrer||
    void 0,dt:e.title,dl:e.location.origin+e.location.pathname+e.location.search,ul:c.language?
    (f.language||"").toLowerCase():void 0,de:c.characterSet?e.characterSet:void 0,
    sr:c.screenSize?(a.screen||{}).width+"x"+(a.screen||{}).height:void 0,vp:c.screenSize&&
    a.visualViewport?(a.visualViewport||{}).width+"x"+(a.visualViewport||{}).height:void 0,
    ec:s||void 0,ea:t||void 0,el:u||void 0,ev:v||void 0,exd:w||void 0,exf:"undefined"!=typeof x&&
    !1==!!x?0:void 0});if(f.sendBeacon)f.sendBeacon(z,A);else{var y=new XMLHttpRequest;
    y.open("POST",z,!0),y.send(A)}};d.pushState=function(r){return"function"==typeof d.onpushstate&&
    d.onpushstate({state:r}),setTimeout(n,c.delay||10),i.apply(d,arguments)},n(),
    a.ma={trackEvent:function o(r,s,t,u){return n("event",r,s,t,u)},
    trackException:function q(r,s){return n("exception",null,null,null,null,r,s)}}})
    (window,"UA-42531762-1",{anonymizeIp:true,colorDepth:true,characterSet:true,screenSize:true,language:true});
  </script>
</head>
<body x-data="darkmode">
  <script is:inline>
    // On page load or when changing themes, best to add inline in `head` to avoid FOUC
    try {
      if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
        document.body.style.backgroundColor = "#2e3440";
        document.body.style.color = "#ffffff";
      } else {
        document.documentElement.classList.remove('dark');
      }
    } catch (_) {}
  </script>
  <Sprite.Provider>
    <header class="header">
      <nav>
        <div>
          <a href="https://linkedin.com/in/carlosbronze" rel="me" title="LinkedIn" >
            <Sprite name="mdi:linkedin" />
          </a>
          <a href="https://twitter.com/carlosbronze" rel="me" title="Twitter" >
            <Sprite name="mdi:twitter" />
          </a>
          <a href="https://github.com/bronze" rel="me" title="GitHub" >
            <Sprite name="mdi:github" />
          </a>
          <a title="Theme Toggle" x-on:click="toggleTheme()">
            <Sprite name="mdi:theme-light-dark" />
          </a>
        </div>
      </nav>
    </header>

    <main>
      <h1>Carlos Bronze</h1>
      <p>Digital Branding</p>
    </main>

  </Sprite.Provider>
  <!-- <script src="//unpkg.com/alpinejs" defer is:inline></script> -->
  <script>
    // Alpine load
    import '../scripts/main.js';
  </script>
</body>
</html>

<script>
  // Alpine data
  document.addEventListener('alpine:init', () => {
    Alpine.data('darkmode', () => ({
      // Define darkmode
      dark: (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)),

      // Toggle function
      toggleTheme() {
        if (window.localStorage.theme != 'dark') {
          document.documentElement.classList.add('dark');
          localStorage.theme = 'dark';
        } else {
          document.documentElement.classList.remove('dark');
          document.body.style.backgroundColor = "";
          window.localStorage.theme = null;
        }
        this.dark = !this.dark;
        // console.log('storage: ' + window.localStorage.theme + ' | dark: ' + this.dark);
      },

      // Get values on init
      init() {
        if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark');
          localStorage.theme = 'dark'; // Force a dark value on first login without preset localstorage to avoid bugs on checkbox checked
          this.dark = true;
          // console.log('init storage: ' + window.localStorage.theme + ' | dark: ' + this.dark);
        } else {
          document.documentElement.classList.remove('dark');
          this.dark = false;
          // console.log('init storage: ' + window.localStorage.theme + ' | dark: ' + this.dark);
        }
        // console.log('storage: ' + window.localStorage.theme + ' | dark: ' + this.dark);
      }
    }))
  })
</script>